---
description: 
globs: 
alwaysApply: false
---
# Storybook 스토리 작성 규칙

Storybook 스토리를 일관되고 정확하게 작성하기 위한 규칙입니다.

**1. 파일 및 스토리 명명 규칙**

*   **스토리 파일명**: 컴포넌트 디렉토리 내에 `index.stories.tsx`로 작성합니다.
*   **Meta `title`**: `COMPONENTS/컴포넌트이름` 형식으로 작성합니다. (예: `COMPONENTS/Button`)
*   **기본 스토리**: `Basic`으로 명명합니다.
*   **변형/상태 스토리**: 컴포넌트의 다양한 시각적 변형(예: 색상, 크기)이나 상태(예: disabled, selected)를 보여주는 스토리는 해당 특징을 명확히 나타내는 이름으로 작성합니다. (예: `Color`, `Size`, `Disabled`, `Capsule`)

**2. Meta 객체 (`export default`) 설정**

*   `component`: 스토리의 대상이 되는 컴포넌트를 명시합니다.
*   `parameters`:
    *   `layout: "centered"`: 컴포넌트를 스토리 캔버스 중앙에 배치합니다. (내용이 넘치거나 전체 화면을 차지해야 하는 경우 `"padded"` 또는 `"fullscreen"` 고려)
    *   `docs.source.type: "code"`: 문서 탭에서 소스 코드를 보여줄 때 타입을 코드로 지정합니다.
    *   `docs.source.language: "tsx"`: 소스 코드의 언어를 TSX로 명시합니다. (필요한 경우)
*   `tags: ["autodocs"]`: Storybook이 자동으로 컴포넌트 문서를 생성하도록 이 태그를 항상 포함합니다.
*   `args`: children, className은 항상 control: false로 지정합니다.

**3. `Basic` 스토리 작성 규칙**

*   `Basic` 스토리는 컴포넌트의 가장 **일반적이고 자주 사용되는 모습**을 보여주는 것을 최우선으로 합니다. 사용자가 컴포넌트를 처음 접했을 때 실제 사용 환경과 유사한 형태로 쉽게 이해하고 테스트할 수 있도록 구성합니다.
*   컴포넌트의 특성에 따라, 필요한 경우 **여러 개의 아이템 또는 요소를 포함**하여 일반적인 사용 시나리오를 반영합니다. (예: 아코디언의 경우 여러 개의 아코디언 아이템을 기본으로 표시)
*   `argTypes`: 컴포넌트의 핵심적인 기능 및 시각적 표현과 직접적으로 관련된 `props`에 대해 상세히 정의하여 Storybook 컨트롤 패널에서 조작할 수 있도록 합니다.
    *   `control`: `prop`의 유형에 따라 `select`, `boolean`, `radio`, `text` 등 적절한 컨트롤 타입을 지정합니다.
    *   `options`: `select` 또는 `radio` 컨트롤의 경우, 선택 가능한 옵션들을 배열로 제공합니다.
    *   `description`: 각 `prop`에 대한 설명을 한국어로 명확하게 작성합니다. (예: "뱃지의 색상", "캡슐 형태 여부")
    *   **주의**: `className` prop은 `argTypes`에 기본적으로 포함하지 않습니다. 스타일링 관련 테스트는 스토리의 `args`나 `render` 함수 내에서 직접 `className`을 전달하여 테스트하거나, 필요한 경우 별도의 "Styling" 또는 "Customization" 관련 스토리를 구성하는 것을 권장합니다.
*   `args`: 각 `prop`의 기본값을 설정하여 스토리가 처음 로드될 때의 모습을 정의합니다.
*   `parameters.docs.canvas.sourceState: "shown"`: 스토리 캔버스 탭에서 기본적으로 소스 코드가 펼쳐져 보이도록 설정합니다.
*   `render`: `args`를 컴포넌트에 전달하는 렌더 함수를 기본으로 사용합니다. `Basic` 스토리의 경우, 이 함수는 컴포넌트의 일반적인 사용 형태에 맞게 `children` 등을 포함하여 구성됩니다.
*   **`Basic` 스토리의 문서 소스 코드 지침**: `Basic` 스토리는 **항상** `parameters.docs.source.code` 옵션을 사용하여, 문서(Docs) 탭에 실제 사용자가 참고할 핵심적인 코드 예시를 명시적으로 제공해야 합니다.
    *   제공되는 코드 예시에는 **`import` 문을 포함하지 않습니다.**
    *   코드 예시는 **별도의 `export function` 선언 없이**, 실제 로직(예: `React.useState`를 사용한 상태 관리 및 JSX 반환 부분)부터 바로 시작하도록 작성하여 사용자가 핵심 로직을 빠르게 파악하고 활용할 수 있도록 합니다. 예시: `const [value, setValue] = React.useState(""); return (<Input value={value} onChange={...} />);` 와 같은 형태.
*   **합성 컴포넌트(Compound Components)의 경우**: **`Basic` 스토리만** `parameters.docs.source.code` 옵션을 사용하여, 위 지침(import문 제외, export function 제외)에 따라 부모와 자식 컴포넌트들을 함께 사용하는 전체적인 마크업 구조 예시를 제공합니다. 합성 컴포넌트의 다른 변형 스토리들은 소스 코드를 노출하지 않습니다.
*   **라벨, 피드백 메시지 등이 결합된 파생 스토리 (예: `WithLabel`, `WithFeedback`)**: `Basic` 스토리는 핵심이 되는 기본 컴포넌트에 집중합니다. 라벨 등이 결합된 파생 스토리는 명확한 이름으로 분리하여 작성하고, 이러한 파생 스토리들은 **문서에 소스 코드를 명시적으로 노출하지 않습니다 (`parameters.docs.source.code`를 설정하지 않음).**
*   **사용자 입력 컴포넌트의 상태 관리 및 문서화**: 사용자의 입력에 따라 상태가 변경되는 컴포넌트의 경우(예: `Input`, `Textarea`), `render` 함수 내에서 `React.useState`를 활용하여 사용자가 직접 입력하고 그 결과를 확인할 수 있도록 `Basic` 또는 관련 파생 스토리(예: `WithLabel`)를 구현할 수 있습니다.
    *   `Basic` 스토리의 경우, `parameters.docs.source.code` 옵션을 사용하여 위의 코드 예시 지침을 따라 `React.useState`를 포함한 예시 코드를 문서에 제공합니다.
    *   `Basic`이 아닌 파생 스토리(예: `WithLabel`)의 경우, `React.useState`를 사용하더라도 문서에 소스 코드를 명시적으로 노출하지 않습니다.
    *   Storybook 컨트롤 패널을 통해 `error`, `disabled`와 같은 주요 상태를 사용자가 직접 테스트하고 확인할 수 있도록 관련 스토리의 `argTypes`를 상세히 설정합니다.

**4. 변형(Variant/State) 스토리 작성 규칙**

*   각각의 주요 변형(색상, 크기, 스타일 등)이나 상태(활성/비활성, 선택됨 등)를 명확하게 보여주는 별도의 스토리를 작성합니다.
*   **문서 소스 코드 비노출**: `Basic` 스토리와 `Basic` 합성 컴포넌트 스토리를 제외한 모든 변형/상태 스토리들은 **문서에 소스 코드를 명시적으로 노출하지 않습니다 (`parameters.docs.source.code`를 설정하지 않음).** Storybook이 자동으로 생성하는 소스 코드(주로 `render` 함수 기반) 또는 `Controls` 탭을 통해 컴포넌트의 사용법을 확인합니다.
*   `render` 함수 내에서 여러 예시 컴포넌트를 `section` 또는 `div` 태그로 그룹화합니다.
*   `className` (예: `flex gap-4 items-center`)을 활용하여 그룹화된 컴포넌트들의 레이아웃을 적절히 조정합니다.
*   각 컴포넌트 예시에는 명확한 `children` 텍스트나 속성을 부여하여 어떤 변형인지 시각적으로 쉽게 구분할 수 있도록 합니다. (예: `<Badge color="light">Light</Badge>`)
*   특정 상태를 고정하여 보여주는 스토리의 경우(예: `Disabled` 스토리), `args` 객체를 사용하여 해당 `prop` 값을 직접 설정할 수 있습니다. (예: `args: { disabled: true }`)
*   **고정된 시각적 요소(예: 아이콘)를 포함하는 변형 스토리**: 특정 아이콘이나 스타일이 고정된 변형을 보여주는 스토리의 경우, 해당 시각적 요소(예: `leftIcon`, `rightIcon`)를 `render` 함수 내에서 직접 컴포넌트에 할당하여 명확하게 고정된 모습을 보여줄 수 있습니다. (이 경우에도 소스 코드는 위 규칙에 따라 노출하지 않습니다.)

**5. 복잡한 상호작용 또는 여러 컴포넌트 조합 스토리**

*   상태 관리(`React.useState` 사용 등)가 필요하거나 여러 하위 컴포넌트를 조합하여 특정 UI 패턴을 보여줘야 하는 경우, 스토리 파일 내에 별도의 예시용 함수형 컴포넌트를 정의하고 이를 `render` 함수에서 사용합니다. (`BottomSheet`의 `BasicSheetExample` 참고)
*   `parameters.docs.source.code`: 사용자가 실제 코드에서 어떻게 활용할 수 있는지 보여주기 위해, 복잡한 예시의 경우 문서에 표시될 소스 코드 스니펫을 명시적으로 제공할 수 있습니다.

**6. 일관성 있는 Props 사용**

*   다음과 같은 표준화된 `prop` 이름을 우선적으로 사용합니다:
    *   `children`: 컴포넌트 내부에 표시될 내용 또는 자식 요소.
    *   `color` 또는 `variant`: 컴포넌트의 주요 시각적 스타일 (예: `primary`, `secondary`, `light`).
    *   `size`: 컴포넌트의 크기 (예: `sm`, `md`, `lg`).
    *   `capsule`: 캡슐 또는 알약 형태 여부를 나타내는 `boolean` `prop`.
    *   `disabled`: 비활성화 상태를 나타내는 `boolean` `prop`.
    *   `selected`: 선택된 상태를 나타내는 `boolean` `prop`.

**7. 문서화 및 설명**

*   `argTypes`의 `description` 필드를 적극 활용하여 각 `prop`의 역할과 사용법에 대한 설명을 한국어로 명확하고 상세하게 작성합니다.
*   스토리 자체가 특정 사용 사례나 목적을 설명해야 할 경우, 스토리 정의부 바로 위에 JSDoc 형식의 주석을 추가하거나, Storybook의 `parameters.docs.description.story` 옵션을 활용하여 설명을 추가할 수 있습니다.

